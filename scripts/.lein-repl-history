(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(subs "foobar")
(subs "foobar" 2)
(subs "foobar" 1)
(subs "foobar" 0 1)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(let [a 10 [b c] [100 200]] (list a b c))
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(disj {:a 10} :a)
(assoc [1 2 3] 4)
(assoc 4 [1 2 3])
(doc assoc)
(assoc {} :foo/bar 10)
(assoc {} :foo/bar 10 :quux/qux 30))
(assoc {} :foo/bar 10 :quux/qux 30)
(merge {} {:foo/bar 10 :quux/qux 30})
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(use 'scripts.process-hasd :reload)
(process-hasd)
(generate-hasd-tabtree)
(use 'scripts.process-hasd :reload)
(generate-hasd-tabtree)
